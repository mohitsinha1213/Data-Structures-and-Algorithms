class Solution(object):
    
    def lcs(self, x, y, n, m, dp):
        if n == 0 or m == 0:
            return 0
        if dp[n][m] != -1:
            return dp[n][m]

        if x[n-1] == y[m-1]:
            dp[n][m] = 1 + self.lcs(x,y,n-1,m-1, dp)
            return dp[n][m]
        else:
            dp[n][m] = max(self.lcs(x,y,n-1,m,dp), self.lcs(x,y,n,m-1,dp))
            return dp[n][m]
        
    def longestPalindromeSubseq(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        m = n
        # X = String a
        # Y = reverse of String a
        # LPS(a) = LCS(a, reverse(a))

        dp = [[-1 for _ in range(m+1)]for _ in range(n+1)]
        return self.lcs(s, s[::-1], n, m, dp)


class Solution(object):
    def targetSum(self, nums, sum, n):

        if sum == 0:
            return 1
        if n == 0:
            return 0
        if nums[n-1] <= sum:

            take = self.targetSum(nums, sum - nums[n-1], n-1)
            nottake = self.targetSum(nums, sum, n-1)
            return take + nottake
        else:
            return self.targetSum(nums, sum, n-1)
    
    def findTargetSumWays(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        # ARR --> 1+1+1+1-1 = TARGET(3)
        #           S1(1+1+1+1) - S2(1) = TARGET(3)
        #           S1 - S2 = TARGET ---1
        #           S1 + S2 = SUM(NUMS) ---2
        #             1 + 2
        #           S1 = (TARGET + SUM(NUMS)) / 2

        #           COUNT ALL SUBSET WHERE SUM = S1


        sum1 = (target + sum(nums)) // 2

        return self.targetSum(nums, sum1, len(nums))

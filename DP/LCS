# def LCS(X, Y, n, m, dp):
    
#     if n == 0 or m == 0:
#         return 0
    
#     if dp[n][m] != -1:
#         return dp[n][m]
    
#     if X[n-1] == Y[m-1]:
#         dp[n][m] = 1 + LCS(X, Y, n-1, m-1, dp)
#         return dp[n][m]
    
#     else:
#         dp[n][m] = max(LCS(X,Y, n-1, m, dp), LCS(X, Y, n, m-1, dp))
#         return dp[n][m]
    

# X = "abcdefgh"
# Y = "hgfedcbaceg"
# n = len(X)
# m = len(Y)

# dp = [[-1 for _ in range(m+1)]for _ in range (n+1)]

# answer = LCS(X, Y, n, m, dp)
# print(answer)    



# TABULATION

X = "abcdefgh"
Y = "hgfedcbaceg"
n = len(X)
m = len(Y)

dp = [[None for _ in range(m+1)]for _ in range (n+1)]
for i in range(n+1):
    for j in range(m+1):
        if i == 0 or j == 0:
            dp[i][j] = 0

for i in range(1, n+1):
    for j in range(1,m+1):
        if X[i-1] == Y[j-1]:
            dp[i][j] = 1 + dp[i-1][j-1]    
        else:
            dp[i][j] = max(dp[i-1][j] , dp[i][j-1])
    
print(dp[n][m])                    

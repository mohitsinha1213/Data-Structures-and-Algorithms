class Solution(object):
    
    def coinAmount(self, coins, amount, n, dp):

        if amount == 0:
            return 1
        if n == 0:
            return 0  
        
        if dp[n][amount] != -1:
            return dp[n][amount]

        if coins[n-1] <= amount:

            take = self.coinAmount(coins, amount - coins[n-1], n, dp)
            nottake = self.coinAmount(coins, amount, n-1, dp)
            dp[n][amount] = (take + nottake)
            return dp[n][amount]

        else:
            dp[n][amount] = self.coinAmount(coins, amount, n-1, dp) 
            return  dp[n][amount]
    
    def change(self, amount, coins):
        """
        :type amount: int
        :type coins: List[int]
        :rtype: int
        """
        n = len(coins)
        dp = [[-1 for _ in range(amount+1)]for _ in range(n+1)]
        return self.coinAmount(coins, amount, len(coins), dp)
